name: CI/CD Pipeline - Deploy to Azure and AWS

on:
  # CI/CD已临时禁用 - 如需重新启用，请取消下面的注释
  # push:
  #   branches: [ main, master ]
  # pull_request:
  #   branches: [ main, master ]
  
  # 手动触发（可选）
  workflow_dispatch:

env:
  APP_NAME: charging-station-service
  DOCKER_IMAGE: charging-station-service

jobs:
  test:
    runs-on: ubuntu-latest
    name: 运行测试
    
    permissions:
      contents: read
      actions: read
      checks: write
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
      
    - name: 设置Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 缓存Maven依赖
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 运行测试2
      run: mvn clean test
      
    - name: 生成测试报告
      uses: dorny/test-reporter@v1.9.1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    name: 构建并推送Docker镜像
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
      
    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3
        
    - name: 调试Docker凭据
      run: |
        echo "Username length: ${#USERNAME}"
        echo "Password length: ${#PASSWORD}"
        echo "Username starts with: ${USERNAME:0:3}..."
        if [ -z "$USERNAME" ]; then
          echo "❌ DOCKER_USERNAME is empty!"
          exit 1
        fi
        if [ -z "$PASSWORD" ]; then
          echo "❌ DOCKER_PASSWORD is empty!"
          exit 1
        fi
        echo "✅ Both username and password are set"
      env:
        USERNAME: ${{ secrets.DOCKER_USERNAME }}
        PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 登录Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 配置AWS凭据（用于ECR登录）
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: 登录ECR Public
      run: |
        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
        
    - name: 构建并推送到Docker Hub和ECR Public
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest
          ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}
          public.ecr.aws/x9x8a8j5/charging-station-service:latest
          public.ecr.aws/x9x8a8j5/charging-station-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-azure:
    runs-on: ubuntu-latest
    needs: build-and-push
    name: 部署到Azure
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
      
    - name: 登录Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    # 使用 App Service，注释掉 Container Instances
    # - name: 部署到Azure Container Instances
    #   uses: azure/aci-deploy@v1
    #   with:
    #     resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
    #     dns-name-label: ${{ env.APP_NAME }}-${{ github.run_number }}
    #     image: ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}
    #     name: ${{ env.APP_NAME }}
    #     location: 'East Asia'
    #     ports: '8081'
    #     environment-variables: |
    #       SPRING_PROFILES_ACTIVE=prod
    #       SPRING_CLOUD_CONFIG_ENABLED=false
    #       DB_URL=${{ secrets.AZURE_DB_URL }}
    #       DB_USERNAME=${{ secrets.AZURE_DB_USERNAME }}
    #       DB_PASSWORD=${{ secrets.AZURE_DB_PASSWORD }}
    #     cpu: 1
    #     memory: 2
        
    - name: 配置Azure App Service应用设置
      run: |
        echo "🔧 配置 App Service 环境变量和端口..."
        
        # 配置环境变量
        az webapp config appsettings set \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name ${{ secrets.AZURE_APP_NAME }} \
          --settings \
            SPRING_PROFILES_ACTIVE=prod \
            SPRING_CLOUD_CONFIG_ENABLED=false \
            DB_URL="${{ secrets.AZURE_DB_URL }}" \
            DB_USERNAME="${{ secrets.AZURE_DB_USERNAME }}" \
            DB_PASSWORD="${{ secrets.AZURE_DB_PASSWORD }}" \
            WEBSITES_PORT=8081 \
            PORT=8081 \
            SERVER_PORT=8081
            
        # 配置容器端口
        az webapp config set \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name ${{ secrets.AZURE_APP_NAME }} \
          --linux-fx-version "DOCKER|${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}"
          
        echo "✅ App Service 配置完成"
        
    - name: 验证配置
      run: |
        echo "🔍 验证 App Service 配置..."
        az webapp show \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name ${{ secrets.AZURE_APP_NAME }} \
          --query "{state: state, defaultHostName: defaultHostName, linuxFxVersion: siteConfig.linuxFxVersion}" \
          --output table
        
    - name: 部署到Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_APP_NAME }}
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}

  deploy-aws:
    runs-on: ubuntu-latest
    needs: build-and-push
    name: 部署到AWS
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
      
    - name: 配置AWS凭据
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: 智能AWS App Runner部署
      run: |
        echo "🚀 智能部署到 AWS App Runner..."
        
        # 显示当前使用的AWS区域
        echo "🌍 当前AWS区域: $AWS_DEFAULT_REGION"
        
        # 先列出所有服务进行调试
        echo "🔍 调试：列出所有App Runner服务..."
        aws apprunner list-services --output table
        
        # 检查特定服务名称的服务 - 改进查询方式
        echo "🔍 查找charging-station-service服务..."
        
        # 方法1：从table输出中提取ARN（最可靠）
        echo "🔍 方法1：从table输出提取ARN..."
        SERVICE_ARN=$(aws apprunner list-services --output table | grep charging-station-service | awk '{print $4}' | tr -d '|' | xargs)
        
        echo "🔍 调试信息："
        echo "SERVICE_ARN 原始值: '$SERVICE_ARN'"
        echo "SERVICE_ARN 长度: ${#SERVICE_ARN}"
        
        # 如果方法1失败，尝试文本输出方式
        if [ -z "$SERVICE_ARN" ] || [ "$SERVICE_ARN" = "None" ] || [ "$SERVICE_ARN" = "null" ]; then
          echo "🔍 方法2：使用text输出格式..."
          SERVICE_ARN=$(aws apprunner list-services --output text | grep charging-station-service | awk '{print $2}')
          echo "🔍 方法2结果: '$SERVICE_ARN'"
        fi
        
        # 如果还是失败，尝试JMESPath（但用更简单的方式）
        if [ -z "$SERVICE_ARN" ] || [ "$SERVICE_ARN" = "None" ] || [ "$SERVICE_ARN" = "null" ]; then
          echo "🔍 方法3：JMESPath查询..."
          SERVICE_ARN=$(aws apprunner list-services --query 'ServiceList[?ServiceName==`charging-station-service`].ServiceArn' --output text)
          echo "🔍 方法3结果: '$SERVICE_ARN'"
        fi
        
        # 最终检查逻辑
        if [ -n "$SERVICE_ARN" ] && [ "$SERVICE_ARN" != "None" ] && [ "$SERVICE_ARN" != "null" ] && [ "$SERVICE_ARN" != "" ]; then
          echo "🔄 找到现有服务: $SERVICE_ARN"
          
          # 检查服务状态
          SERVICE_STATUS=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --query "Service.Status" --output text)
          echo "📊 服务当前状态: $SERVICE_STATUS"
          
          # 智能状态处理
          if [ "$SERVICE_STATUS" = "RUNNING" ]; then
            echo "✅ 服务正常运行，触发零停机更新部署..."
            aws apprunner start-deployment --service-arn "$SERVICE_ARN"
            echo "🎯 零停机更新已触发！App Runner将进行滚动部署"
            
          elif [ "$SERVICE_STATUS" = "PAUSED" ]; then
            echo "⏸️ 服务已暂停，先恢复服务再更新..."
            aws apprunner resume-service --service-arn "$SERVICE_ARN"
            echo "⏳ 等待服务恢复..."
            aws apprunner wait service-running --service-arn "$SERVICE_ARN"
            echo "🔄 服务已恢复，触发更新部署..."
            aws apprunner start-deployment --service-arn "$SERVICE_ARN"
            echo "✅ 更新部署已触发！"
            
          else
            echo "❌ 服务状态异常 ($SERVICE_STATUS)，删除后重新创建..."
            echo "📝 常见异常状态：CREATE_FAILED, DELETE_FAILED, OPERATION_IN_PROGRESS"
            
            # 删除异常服务
            echo "🗑️ 删除异常服务..."
            aws apprunner delete-service --service-arn "$SERVICE_ARN"
            
            # 等待删除完成 - 使用轮询方式
            echo "⏳ 等待服务完全删除..."
            max_attempts=30
            attempt=0
            while [ $attempt -lt $max_attempts ]; do
              REMAINING_SERVICE=$(aws apprunner list-services --query "ServiceList[?ServiceName=='charging-station-service'].ServiceArn" --output text 2>/dev/null || echo "")
              if [ -z "$REMAINING_SERVICE" ] || [ "$REMAINING_SERVICE" = "None" ]; then
                echo "✅ 服务已完全删除"
                break
              fi
              echo "⏳ 删除进行中，等待30秒... (尝试 $((attempt+1))/$max_attempts)"
              sleep 30
              attempt=$((attempt+1))
            done
            
            if [ $attempt -eq $max_attempts ]; then
              echo "⚠️ 删除超时，但继续创建新服务..."
            fi
            
            # 额外等待确保AWS清理完成
            echo "⏳ 额外等待30秒确保AWS完全清理..."
            sleep 30
            
            # 创建新服务
            echo "📦 创建新的健康服务..."
            cp aws-apprunner.json temp-apprunner.json
            sed -i 's|DOCKER_IMAGE_PLACEHOLDER|public.ecr.aws/x9x8a8j5/charging-station-service:${{ github.sha }}|g' temp-apprunner.json
            sed -i 's|DB_URL_PLACEHOLDER|${{ secrets.AZURE_DB_URL }}|g' temp-apprunner.json
            sed -i 's|DB_USERNAME_PLACEHOLDER|${{ secrets.AZURE_DB_USERNAME }}|g' temp-apprunner.json
            sed -i 's|DB_PASSWORD_PLACEHOLDER|${{ secrets.AZURE_DB_PASSWORD }}|g' temp-apprunner.json
            
            echo "🔍 调试：检查生成的配置文件..."
            cat temp-apprunner.json
            
            echo "🚀 执行创建命令..."
            aws apprunner create-service --cli-input-json file://temp-apprunner.json
            rm temp-apprunner.json
            echo "✅ 新服务创建完成！"
          fi
          
        else
          echo "📦 未找到现有服务，创建新服务..."
          
          # 复制配置文件并替换占位符
          cp aws-apprunner.json temp-apprunner.json
          sed -i 's|DOCKER_IMAGE_PLACEHOLDER|public.ecr.aws/x9x8a8j5/charging-station-service:${{ github.sha }}|g' temp-apprunner.json
          sed -i 's|DB_URL_PLACEHOLDER|${{ secrets.AZURE_DB_URL }}|g' temp-apprunner.json
          sed -i 's|DB_USERNAME_PLACEHOLDER|${{ secrets.AZURE_DB_USERNAME }}|g' temp-apprunner.json
          sed -i 's|DB_PASSWORD_PLACEHOLDER|${{ secrets.AZURE_DB_PASSWORD }}|g' temp-apprunner.json
          
          # 创建新服务
          aws apprunner create-service --cli-input-json file://temp-apprunner.json
          
          # 清理
          rm temp-apprunner.json
          
          echo "✅ 新服务创建完成！"
        fi
        
        echo "🎯 AWS App Runner 部署完成！"

  # 可以在这里添加其他后续步骤 