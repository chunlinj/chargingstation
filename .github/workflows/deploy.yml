name: CI/CD Pipeline - Deploy to Azure and AWS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  APP_NAME: charging-station-service
  DOCKER_IMAGE: charging-station-service

jobs:
  test:
    runs-on: ubuntu-latest
    name: 运行测试
    
    permissions:
      contents: read
      actions: read
      checks: write
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
      
    - name: 设置Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 缓存Maven依赖
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 运行测试2
      run: mvn clean test
      
    - name: 生成测试报告
      uses: dorny/test-reporter@v1.9.1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    name: 构建并推送Docker镜像
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
      
    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3
        
    - name: 调试Docker凭据
      run: |
        echo "Username length: ${#USERNAME}"
        echo "Password length: ${#PASSWORD}"
        echo "Username starts with: ${USERNAME:0:3}..."
        if [ -z "$USERNAME" ]; then
          echo "❌ DOCKER_USERNAME is empty!"
          exit 1
        fi
        if [ -z "$PASSWORD" ]; then
          echo "❌ DOCKER_PASSWORD is empty!"
          exit 1
        fi
        echo "✅ Both username and password are set"
      env:
        USERNAME: ${{ secrets.DOCKER_USERNAME }}
        PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 登录Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 配置AWS凭据（用于ECR登录）
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: 登录ECR Public
      run: |
        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
        
    - name: 构建并推送到Docker Hub和ECR Public
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest
          ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}
          public.ecr.aws/x9x8a8j5/charging-station-service:latest
          public.ecr.aws/x9x8a8j5/charging-station-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-azure:
    runs-on: ubuntu-latest
    needs: build-and-push
    name: 部署到Azure
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
      
    - name: 登录Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    # 使用 App Service，注释掉 Container Instances
    # - name: 部署到Azure Container Instances
    #   uses: azure/aci-deploy@v1
    #   with:
    #     resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
    #     dns-name-label: ${{ env.APP_NAME }}-${{ github.run_number }}
    #     image: ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}
    #     name: ${{ env.APP_NAME }}
    #     location: 'East Asia'
    #     ports: '8081'
    #     environment-variables: |
    #       SPRING_PROFILES_ACTIVE=prod
    #       SPRING_CLOUD_CONFIG_ENABLED=false
    #       DB_URL=${{ secrets.AZURE_DB_URL }}
    #       DB_USERNAME=${{ secrets.AZURE_DB_USERNAME }}
    #       DB_PASSWORD=${{ secrets.AZURE_DB_PASSWORD }}
    #     cpu: 1
    #     memory: 2
        
    - name: 配置Azure App Service应用设置
      run: |
        echo "🔧 配置 App Service 环境变量和端口..."
        
        # 配置环境变量
        az webapp config appsettings set \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name ${{ secrets.AZURE_APP_NAME }} \
          --settings \
            SPRING_PROFILES_ACTIVE=prod \
            SPRING_CLOUD_CONFIG_ENABLED=false \
            DB_URL="${{ secrets.AZURE_DB_URL }}" \
            DB_USERNAME="${{ secrets.AZURE_DB_USERNAME }}" \
            DB_PASSWORD="${{ secrets.AZURE_DB_PASSWORD }}" \
            WEBSITES_PORT=8081 \
            PORT=8081 \
            SERVER_PORT=8081
            
        # 配置容器端口
        az webapp config set \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name ${{ secrets.AZURE_APP_NAME }} \
          --linux-fx-version "DOCKER|${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}"
          
        echo "✅ App Service 配置完成"
        
    - name: 验证配置
      run: |
        echo "🔍 验证 App Service 配置..."
        az webapp show \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name ${{ secrets.AZURE_APP_NAME }} \
          --query "{state: state, defaultHostName: defaultHostName, linuxFxVersion: siteConfig.linuxFxVersion}" \
          --output table
        
    - name: 部署到Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_APP_NAME }}
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}

  deploy-aws:
    runs-on: ubuntu-latest
    needs: build-and-push
    name: 部署到AWS
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
      
    - name: 配置AWS凭据
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: 超级简单的AWS App Runner部署
      run: |
        echo "🚀 使用配置文件部署到 AWS App Runner..."
        
        # 删除已有服务（如果存在）
        SERVICE_ARN=$(aws apprunner list-services --query "ServiceList[?ServiceName=='charging-station-service'].ServiceArn" --output text)
        if [ ! -z "$SERVICE_ARN" ] && [ "$SERVICE_ARN" != "None" ]; then
          echo "删除现有服务: $SERVICE_ARN"
          aws apprunner delete-service --service-arn "$SERVICE_ARN"
          echo "等待服务删除..."
          sleep 60
        fi
        
        # 复制配置文件并替换占位符
        cp aws-apprunner.json temp-apprunner.json
        sed -i 's|DOCKER_IMAGE_PLACEHOLDER|public.ecr.aws/x9x8a8j5/charging-station-service:${{ github.sha }}|g' temp-apprunner.json
        sed -i 's|DB_URL_PLACEHOLDER|${{ secrets.AZURE_DB_URL }}|g' temp-apprunner.json
        sed -i 's|DB_USERNAME_PLACEHOLDER|${{ secrets.AZURE_DB_USERNAME }}|g' temp-apprunner.json
        sed -i 's|DB_PASSWORD_PLACEHOLDER|${{ secrets.AZURE_DB_PASSWORD }}|g' temp-apprunner.json
        
        # 创建服务
        echo "创建App Runner服务..."
        aws apprunner create-service --cli-input-json file://temp-apprunner.json
        
        # 清理
        rm temp-apprunner.json
        
        echo "✅ AWS App Runner 部署完成！"

  deploy-notification:
    runs-on: ubuntu-latest
    needs: [deploy-azure, deploy-aws]
    name: 部署通知
    if: always()
    
    steps:
    - name: 发送部署通知
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow 