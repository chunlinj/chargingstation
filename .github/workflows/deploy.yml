name: CI/CD Pipeline - Deploy to Azure and AWS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  APP_NAME: charging-station-service
  DOCKER_IMAGE: charging-station-service

jobs:
  test:
    runs-on: ubuntu-latest
    name: 运行测试
    
    permissions:
      contents: read
      actions: read
      checks: write
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
      
    - name: 设置Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 缓存Maven依赖
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 运行测试2
      run: mvn clean test
      
    - name: 生成测试报告
      uses: dorny/test-reporter@v1.9.1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    name: 构建并推送Docker镜像
    
    outputs:
      docker_username: ${{ steps.parse-config.outputs.docker_username }}
      azure_resource_group: ${{ steps.parse-config.outputs.azure_resource_group }}
      azure_db_url: ${{ steps.parse-config.outputs.azure_db_url }}
      azure_db_username: ${{ steps.parse-config.outputs.azure_db_username }}
      azure_db_password: ${{ steps.parse-config.outputs.azure_db_password }}
      azure_app_name: ${{ steps.parse-config.outputs.azure_app_name }}
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
      
    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 解析配置
      id: parse-config
      run: |
        echo "$MY_SECRETS" > config.txt
        DOCKER_USERNAME=$(grep "DOCKER_USERNAME:" config.txt | cut -d' ' -f2)
        DOCKER_PASSWORD=$(grep "DOCKER_PASSWORD:" config.txt | cut -d' ' -f2)
        AZURE_RESOURCE_GROUP=$(grep "AZURE_RESOURCE_GROUP:" config.txt | cut -d' ' -f2)
        AZURE_DB_URL=$(grep "AZURE_DB_URL:" config.txt | cut -d' ' -f2-)
        AZURE_DB_USERNAME=$(grep "AZURE_DB_USERNAME:" config.txt | cut -d' ' -f2)
        AZURE_DB_PASSWORD=$(grep "AZURE_DB_PASSWORD:" config.txt | cut -d' ' -f2)
        AZURE_APP_NAME=$(grep "AZURE_APP_NAME:" config.txt | cut -d' ' -f2)
        
        echo "docker_username=$DOCKER_USERNAME" >> $GITHUB_OUTPUT
        echo "docker_password=$DOCKER_PASSWORD" >> $GITHUB_OUTPUT
        echo "azure_resource_group=$AZURE_RESOURCE_GROUP" >> $GITHUB_OUTPUT
        echo "azure_db_url=$AZURE_DB_URL" >> $GITHUB_OUTPUT
        echo "azure_db_username=$AZURE_DB_USERNAME" >> $GITHUB_OUTPUT
        echo "azure_db_password=$AZURE_DB_PASSWORD" >> $GITHUB_OUTPUT
        echo "azure_app_name=$AZURE_APP_NAME" >> $GITHUB_OUTPUT
        
        # 清理临时文件
        rm config.txt
      env:
        MY_SECRETS: ${{ secrets.MY_SECRETS }}
        
    - name: 调试Docker凭据
      run: |
        echo "Username length: ${#USERNAME}"
        echo "Password length: ${#PASSWORD}"
        echo "Username starts with: ${USERNAME:0:3}..."
        if [ -z "$USERNAME" ]; then
          echo "❌ DOCKER_USERNAME is empty!"
          exit 1
        fi
        if [ -z "$PASSWORD" ]; then
          echo "❌ DOCKER_PASSWORD is empty!"
          exit 1
        fi
        echo "✅ Both username and password are set"
      env:
        USERNAME: ${{ steps.parse-config.outputs.docker_username }}
        PASSWORD: ${{ steps.parse-config.outputs.docker_password }}
        
    - name: 登录Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ steps.parse-config.outputs.docker_username }}
        password: ${{ steps.parse-config.outputs.docker_password }}
        
    - name: 构建并推送到Docker Hub
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ steps.parse-config.outputs.docker_username }}/${{ env.APP_NAME }}:latest
          ${{ steps.parse-config.outputs.docker_username }}/${{ env.APP_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-azure:
    runs-on: ubuntu-latest
    needs: build-and-push
    name: 部署到Azure
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 解析Azure配置
      id: parse-azure-config
      run: |
        echo "$MY_SECRETS" > config.txt
        
        # 提取AZURE_CREDENTIALS JSON (从第一个{到最后一个})
        AZURE_CREDENTIALS=$(sed -n '/AZURE_CREDENTIALS: {/,/}/p' config.txt | sed 's/^  AZURE_CREDENTIALS: //')
        
        echo "azure_credentials<<EOF" >> $GITHUB_OUTPUT
        echo "$AZURE_CREDENTIALS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # 清理临时文件
        rm config.txt
      env:
        MY_SECRETS: ${{ secrets.MY_SECRETS }}
    
    - name: Checkout代码
      uses: actions/checkout@v4
      
    - name: 登录Azure
      uses: azure/login@v1
      with:
        creds: ${{ steps.parse-azure-config.outputs.azure_credentials }}
        
    - name: 部署到Azure Container Instances
      uses: azure/aci-deploy@v1
      with:
        resource-group: ${{ needs.build-and-push.outputs.azure_resource_group }}
        dns-name-label: ${{ env.APP_NAME }}-${{ github.run_number }}
        image: ${{ needs.build-and-push.outputs.docker_username }}/${{ env.APP_NAME }}:${{ github.sha }}
        name: ${{ env.APP_NAME }}
        location: 'East Asia'
        ports: '8081'
        environment-variables: |
          SPRING_PROFILES_ACTIVE=prod
          SPRING_CLOUD_CONFIG_ENABLED=false
          DB_URL=${{ needs.build-and-push.outputs.azure_db_url }}
          DB_USERNAME=${{ needs.build-and-push.outputs.azure_db_username }}
          DB_PASSWORD=${{ needs.build-and-push.outputs.azure_db_password }}
        cpu: 1
        memory: 2
        
    - name: 部署到Azure App Service (可选)
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ needs.build-and-push.outputs.azure_app_name }}
        images: ${{ needs.build-and-push.outputs.docker_username }}/${{ env.APP_NAME }}:${{ github.sha }}

  deploy-aws:
    runs-on: ubuntu-latest
    needs: build-and-push
    name: 部署到AWS
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
      
    - name: 配置AWS凭据
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: 登录AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: 推送镜像到ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.APP_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # 重新标记镜像
        docker pull ${{ needs.build-and-push.outputs.docker_username }}/${{ env.APP_NAME }}:${{ github.sha }}
        docker tag ${{ needs.build-and-push.outputs.docker_username }}/${{ env.APP_NAME }}:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag ${{ needs.build-and-push.outputs.docker_username }}/${{ env.APP_NAME }}:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # 推送到ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
    - name: 更新ECS服务
      run: |
        aws ecs update-service \
          --cluster ${{ secrets.AWS_ECS_CLUSTER }} \
          --service ${{ secrets.AWS_ECS_SERVICE }} \
          --force-new-deployment
          
    - name: 部署到AWS App Runner (可选)
      run: |
        aws apprunner start-deployment \
          --service-arn ${{ secrets.AWS_APPRUNNER_SERVICE_ARN }}

  deploy-notification:
    runs-on: ubuntu-latest
    needs: [deploy-azure, deploy-aws]
    name: 部署通知
    if: always()
    
    steps:
    - name: 发送部署通知
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow 