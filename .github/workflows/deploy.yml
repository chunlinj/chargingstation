name: CI/CD Pipeline - Deploy to Azure and AWS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  APP_NAME: charging-station-service

jobs:
  test:
    runs-on: ubuntu-latest
    name: 运行测试
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
      
    - name: 设置Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 运行测试
      run: mvn clean test
      
    - name: 显示测试结果
      if: always()
      run: |
        echo "测试完成"
        if [ -d "target/surefire-reports" ]; then
          echo "测试报告已生成"
          ls -la target/surefire-reports/
        fi

  # 临时禁用Docker构建来测试问题
  # build-and-push:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   name: 构建并推送Docker镜像
  #   
  #   steps:
  #   - name: Checkout代码
  #     uses: actions/checkout@v4
  #     
  #   - name: 设置Docker Buildx
  #     uses: docker/setup-buildx-action@v3
  #     
  #   - name: 登录Docker Hub
  #     uses: docker/login-action@v3
  #     with:
  #       username: ${{ secrets.DOCKER_USERNAME }}
  #       password: ${{ secrets.DOCKER_PASSWORD }}
  #       
  #   - name: 构建并推送到Docker Hub
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       push: true
  #       tags: |
  #         ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest
  #         ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}

  # deploy-azure:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   name: 部署到Azure
  #   if: github.ref == 'refs/heads/main'
  #   
  #   steps:
  #   - name: Checkout代码
  #     uses: actions/checkout@v4
  #     
  #   - name: 登录Azure
  #     uses: azure/login@v1
  #     with:
  #       creds: ${{ secrets.AZURE_CREDENTIALS }}
  #       
  #   - name: 部署到Azure Container Instances
  #     uses: azure/aci-deploy@v1
  #     with:
  #       resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
  #       dns-name-label: ${{ env.APP_NAME }}-${{ github.run_number }}
  #       image: ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}
  #       name: ${{ env.APP_NAME }}
  #       location: 'East Asia'
  #       ports: '8081'
  #       environment-variables: |
  #         SPRING_PROFILES_ACTIVE=prod
  #         SPRING_CLOUD_CONFIG_ENABLED=false
  #         DB_URL=${{ secrets.AZURE_DB_URL }}
  #         DB_USERNAME=${{ secrets.AZURE_DB_USERNAME }}
  #         DB_PASSWORD=${{ secrets.AZURE_DB_PASSWORD }}
  #       cpu: 1
  #       memory: 2

  test-completion:
    runs-on: ubuntu-latest
    needs: [test]
    name: 测试完成通知
    if: always()
    
    steps:
    - name: 输出测试结果
      run: |
        echo "🧪 测试阶段完成"
        echo "测试状态: ${{ needs.test.result }}"
        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "✅ 所有测试通过"
        else
          echo "❌ 测试失败"
        fi
        echo "下一步：修复Docker配置后重新启用构建和部署" 